// Generated by CoffeeScript 1.3.3
(function() {
  var Element, Shim, name, shim, shimFunction, shimInternals, _i, _len, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  this.shims = [];

  Shim = (function() {

    function Shim() {}

    Shim.prototype.__example = function() {};

    Shim.prototype.__superclass = null;

    return Shim;

  })();

  /*
  shims.push class AJAX extends Shim
  	
  	# Send an AJAX GET request with options
  	#
  	# @example
  	#   AJAX.get
  	get: (options) ->
  		alert options
  */


  /*
  shims.push class DOMTokenList extends Shim
  	__example: -> window.DOMTokenList
  	__superclass: Array
  	
  	# properties:
  		# abc: 'abc'
  */


  shims.push(Element = (function(_super) {

    __extends(Element, _super);

    function Element() {
      return Element.__super__.constructor.apply(this, arguments);
    }

    Element.prototype.matchesSelector = function(selector) {
      console.log('bob');
      if (window.Element.prototype.hasOwnProperty('webkitMatchesSelector')) {
        return this.webkitMatchesSelector(selector);
      }
      if (window.Element.prototype.hasOwnProperty('mozMatchesSelector')) {
        return this.mozMatchesSelector(selector);
      }
    };

    Element.prototype.addEventListener = function(type, listener, useCapture) {
      if ('attachEvent' in window.Element.prototype) {
        return this.attachEvent(type, listener);
      }
    };

    Element.prototype._cumulativeOffset = function() {
      var current, offset;
      offset = {
        top: 0,
        left: 0
      };
      current = this;
      while (current) {
        offset.top += current.offsetTop;
        offset.left += current.offsetLeft;
        current = current.offsetParent;
      }
      return offset;
    };

    Element.prototype._setXStyle = function(styleName, value) {
      var capitalizedStyleName;
      capitalizedStyleName = styleName.charAt(0).toUpperCase() + styleName.slice(1);
      this.style[styleName] = value;
      this.style["O" + capitalizedStyleName] = value;
      this.style["ms" + capitalizedStyleName] = value;
      this.style["Moz" + capitalizedStyleName] = value;
      this.style["webkit" + capitalizedStyleName] = value;
      return this;
    };

    Element.prototype.__example = function() {
      return document.createElement('a');
    };

    return Element;

  })(Shim));

  for (_i = 0, _len = shims.length; _i < _len; _i++) {
    shim = shims[_i];
    if (!window[shim.name]) {
      if (shim.prototype.subClasses != null) {
        window[shim.name] = (function(_super) {

          __extends(_Class, _super);

          function _Class() {
            return _Class.__super__.constructor.apply(this, arguments);
          }

          return _Class;

        })(window[shim.prototype.__superclass]);
      } else {
        window[shim.name] = (function() {

          function _Class() {}

          return _Class;

        })();
      }
    }
    shimInternals = ['__example', '__superclass'];
    _ref = shim.prototype;
    for (name in _ref) {
      shimFunction = _ref[name];
      if (__indexOf.call(shimInternals, name) >= 0) {
        continue;
      }
      console.log(name);
      if (!(name in shim.prototype.__example())) {
        window[shim.name].prototype[name] = shimFunction;
      }
    }
  }

}).call(this);
